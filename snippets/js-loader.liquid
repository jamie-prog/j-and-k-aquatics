{%- if request.design_mode -%}
<script type='text/javascript'>
  const ArenaRequireJS = () => {
    // Object define module name to path
    let modulesDefine = {
      scripts: {
        'currencyRate': '//cdn.shopify.com/s/javascripts/currencies.js'
        , 'currencyJS': '{{ "currency.min.js" | asset_url  }}'
        //,'arn_theme': '{{ "arn-theme.js" | asset_url  }}'
        , 'quickview': '{{ "quickview.js" | asset_url  }}'
        , 'home': '{{ "home.js" | asset_url  }}'
        , 'product': '{{ "product.js" | asset_url  }}'
        , 'collection': '{{ "collection.js" | asset_url  }}'
        , 'blog': '{{ "blog.js" | asset_url  }}'
        , 'page': '{{ "page.js" | asset_url  }}'
        , 'page_404': '{{ "page-404.js" | asset_url  }}'
        , 'tiny': '{{ "tiny-slider.js" | asset_url  }}'
      }, styles: {
        'homepage': '{{"homepage.min.css" | asset_url  }}'
      },
    }

    // Object defined dependencies
    let depsDefine = { scripts: {}, styles: {} }, initials = { scripts: {}, styles: {} }, Queue = { scripts: [], styles: [] }, Loaded = { scripts: [], styles: [] }, InlineScript = {}, InlineStyle = {};

    return {
      init() {
        let requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||
          window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

        let cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

        let start = window.mozAnimationStartTime ? window.mozAnimationStartTime : Date.now();  // Seulement supporté par Firefox. Les autre navigateurs peuvent utiliser quelque chose comme Date.now()..

        let myReq; // Déclarer la variable globalement avant de lancer l'animation
        let __this = this;

        function step(timestamp) {
          var progress = timestamp - start;
          let inlineScriptTags = document.querySelectorAll('script[data-arn-loader="inline"]');
          let inlineStyleTags = document.querySelectorAll('style[data-arn-loader="inline"]');

          /** Prepare for Script */
          for (let i = 0; i < inlineScriptTags.length; i++) {
            if (!inlineScriptTags[i].getAttribute('id')) {
              let deps = inlineScriptTags[i].getAttribute('deps');
              InlineScript[`__inline_script_${i}`] = inlineScriptTags[i].innerHTML;
              if (deps) {
                depsDefine['scripts'][`__inline_script_${i}`] = JSON.parse(deps);
              }
              __this.require(`__inline_script_${i}`, 'scripts');
              // set id for tag to mark position
              inlineScriptTags[i].setAttribute('id', `__inline_script_${i}`);
            } else {
              continue;
            }

          }


          /** Prepare for Script */
          for (let i = 0; i < inlineStyleTags.length; i++) {
            if (!inlineStyleTags[i].getAttribute('id')) {
              let deps = inlineStyleTags[i].getAttribute('deps');
              InlineStyle[`__inline_style_${i}`] = inlineStyleTags[i].innerHTML;
              if (deps) {
                depsDefine['styles'][`__inline_style_${i}`] = JSON.parse(deps);
              }
              __this.require(`__inline_style_${i}`, 'styles');
              // set id for tag to mark position
              inlineStyleTags[i].setAttribute('id', `__inline_style_${i}`);
            } else {
              continue;
            }

          }


          if (progress < 2000) {
            // Ne pas oublier de récupérer l'identifiant à chaque appel de la fonction
            myReq = requestAnimationFrame(step);
          }
        }

      },

      Queue: Queue,
      loadStyleModule: function (styleName) {
        function markLoaded() {
          let idx = Loaded['styles'].findIndex((style) => style === styleName);
          if (idx === -1) {
            Loaded['styles'].push(styleName);
          }
        }

        return new Promise((resolve, reject) => {
          const tagType = (styleName.indexOf('__inline_style') === -1) ? 'link' : 'style';

          let tag = document.createElement(tagType);

          if (tagType === 'link') {
            // Preload
            tag.href = modulesDefine['styles'][styleName];
            tag.rel = 'preload';
            tag.as = 'style';
            document.head.appendChild(tag);
            tag.onload = function () {
              markLoaded();
              resolve({
                styleName,
                type: 'link',
              })
            }

          } else {
            markLoaded();
            tag.innerHTML = InlineStyle[styleName];
            resolve({
              styleName,
              tag,
              type: 'style',
            });
          }
        })
      },

      loadScriptModule: function (scriptName) {
        function markLoaded() {
          let idx = Loaded['scripts'].findIndex((script) => script === scriptName);
          if (idx === -1) {
            Loaded['scripts'].push(scriptName);
          }
        }
        return new Promise((resolve, reject) => {
          const tagType = (scriptName.indexOf('__inline_script') === -1) ? 'link' : 'script';
          let tag = document.createElement(tagType);
          let userAgent = window.navigator.userAgent;

          if (tagType === 'link') {
            if (userAgent.indexOf('Firefox') === -1) {
              // Preload
              tag.href = modulesDefine['scripts'][scriptName];
              tag.rel = 'preload';
              tag.as = 'script';
              document.head.appendChild(tag);
              tag.onload = function () {
                markLoaded();
                resolve({
                  scriptName,
                  type: 'link',
                })
              }
            }
            //fallback firefox
            else {
              let script_tag = document.createElement('script');
              script_tag.src = modulesDefine['scripts'][scriptName];

              document.head.appendChild(script_tag);

              script_tag.onload = function () {
                setTimeout(() => {
                  markLoaded();
                  resolve({
                    scriptName,
                    type: 'no-preload-link',
                  })
                }, 1)

              }
            }

          } else {
            tag.innerHTML = InlineScript[scriptName];
            markLoaded();
            resolve({
              scriptName,
              tag,
              type: 'script',
            });
          }
        });

      },


      orderScript: function () {
        let cache = [];

        function _updateCache(module, weight) {
          let item = cache.find(a => a.scriptName === module);
          if (!item) {
            cache.push({
              scriptName: module,
              weight,
              content: module.indexOf('__inline') !== -1 ? InlineScript[module] : '',
            })
          } else {
            item.weight = weight;
            if (module.indexOf('__inline') !== -1) {
              item['content'] = InlineScript[module];
            }
          }

        }

        function _trackDeps(depName) {
          let deps = depsDefine['scripts'][depName];
          if (!deps) {
            return 1;
          } else {
            let _depsCount = 0;
            for (let i = 0; i < deps.length; i++) {
              let _depName = deps[i];
              _depsCount += _trackDeps(_depName);
            }
            return _depsCount
          }

        }

        for (let i = 0; i < Queue['scripts'].length; i++) {
          let module = Queue['scripts'][i];
          let deps = depsDefine['scripts'][module];
          if (deps && deps.length) {
            let depsCount = 0;
            for (let j = 0; j < deps.length; j++) {
              depsCount += _trackDeps(deps[j]);
            }
            _updateCache(module, depsCount);
          } else {
            _updateCache(module, 0);

          }

        }
        return cache;

      },

      // Load Modules and it's dependencies
      loadModules: async function (type) {
        if (type === 'scripts') {
          let OrderedScript = this.orderScript();
          OrderedScript.sort((a, b) => a.weight - b.weight)
          Queue['scripts'] = OrderedScript.map(item => item.scriptName);

          let loadModuleTasks = [];
          for (let i = 0; i < Queue['scripts'].length; i++) {
            let singleTask = await this.loadScriptModule(Queue[type][i]);
            loadModuleTasks.push(singleTask);
          }

          let _loadScriptModules = await Promise.all(loadModuleTasks);
          Queue['scripts'].map(script => {
            let success_script = _loadScriptModules.find(item => item.scriptName === script);

            if (success_script) {
              if (success_script.type === 'link') {
                let tag = document.createElement('script');
                tag.src = modulesDefine['scripts'][success_script.scriptName];
                tag.crossorigin = "anonymous";
                tag.defer = true;
                tag.async = true;
                document.head.insertBefore(tag, document.head.childNodes[document.head.childNodes.length - 1].nextSibling);
              } else if (success_script.type !== 'no-preload-link') {
                setTimeout(() => {
                  let oldTag = document.getElementById(success_script.scriptName);
                  let parent = oldTag.parentNode;
                  parent.insertBefore(success_script.tag, oldTag);
                  oldTag.remove();
                }, 50)

              }
            }

          });
          Queue['scripts'] = [];
        } else if (type === 'styles') {
          if (Queue['styles'].length === 0) {
            return
          }
          let loadModuleTasks = [];
          for (let i = 0; i < Queue['styles'].length; i++) {
            let singleTask = this.loadStyleModule(Queue[type][i]);
            loadModuleTasks.push(singleTask);
          }
          let _loadStyleModules = await Promise.all(loadModuleTasks);
          Queue['styles'].map(style => {
            let success_style = _loadStyleModules.find(item => item.styleName === style);
            if (success_style) {
              if (success_style.type === 'link') {
                let tag = document.createElement('link');
                tag.href = modulesDefine['styles'][success_style.styleName];
                tag.rel = 'stylesheet';
                document.head.insertBefore(tag, document.head.childNodes[document.head.childNodes.length - 1].nextSibling);

              } else {
                let oldTag = document.getElementById(success_style.styleName);
                let parent = oldTag.parentNode;
                parent.insertBefore(success_style.tag, oldTag);
                oldTag.remove();
              }
            }

          });
          Queue['styles'] = []

        }
      },

      // Start load module entry
      load: function () {

        this.loadModules('scripts');
      },

      // Prepare to queue
      require: function (name, type) {
        // Add module to queue
        Queue[type].push(name);
      },
    }
  }
  const Loader = ArenaRequireJS();
  Loader.init();
</script>
{%- else -%}
<script>
  const ArenaRequireJS = () => { let e = { scripts: { currencyRate: "//cdn.shopify.com/s/javascripts/currencies.js", currencyJS: '{{ "currency.min.js" | asset_url  }}', arn_theme: '{{ "arn-theme.js" | asset_url  }}', quickview: '{{ "quickview.js" | asset_url  }}', home: '{{ "home.js" | asset_url  }}', product: '{{ "product.js" | asset_url  }}', collection: '{{ "collection.js" | asset_url  }}', blog: '{{ "blog.js" | asset_url  }}', page: '{{ "page.js" | asset_url  }}', page_404: '{{ "page-404.js" | asset_url  }}', tiny: '{{ "tiny-slider.js" | asset_url  }}' }, styles: {} }, t = { scripts: {}, styles: {} }, n = { scripts: [], styles: [] }, s = { scripts: [], styles: [] }, i = {}, l = {}; return { init() { window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame, window.cancelAnimationFrame || window.mozCancelAnimationFrame, window.mozAnimationStartTime ? window.mozAnimationStartTime : Date.now() }, Queue: n, loadStyleModule: function (t) { function n() { -1 === s.styles.findIndex(e => e === t) && s.styles.push(t) } return new Promise((s, i) => { const r = -1 === t.indexOf("__inline_style") ? "link" : "style"; let o = document.createElement(r); "link" === r ? (o.href = e.styles[t], o.rel = "preload", o.as = "style", document.head.appendChild(o), o.onload = function () { n(), s({ styleName: t, type: "link" }) }) : (n(), o.innerHTML = l[t], s({ styleName: t, tag: o, type: "style" })) }) }, loadScriptModule: function (t) { function n() { -1 === s.scripts.findIndex(e => e === t) && s.scripts.push(t) } return new Promise((s, l) => { const r = -1 === t.indexOf("__inline_script") ? "link" : "script"; let o = document.createElement(r), a = window.navigator.userAgent; if ("link" === r) if (-1 === a.indexOf("Firefox")) o.href = e.scripts[t], o.rel = "preload", o.as = "script", document.head.appendChild(o), o.onload = function () { n(), s({ scriptName: t, type: "link" }) }; else { let i = document.createElement("script"); i.src = e.scripts[t], document.head.appendChild(i), i.onload = function () { setTimeout(() => { n(), s({ scriptName: t, type: "no-preload-link" }) }, 1) } } else o.innerHTML = i[t], n(), s({ scriptName: t, tag: o, type: "script" }) }) }, orderScript: function () { let e = []; function s(t, n) { let s = e.find(e => e.scriptName === t); s ? (s.weight = n, -1 !== t.indexOf("__inline") && (s.content = i[t])) : e.push({ scriptName: t, weight: n, content: -1 !== t.indexOf("__inline") ? i[t] : "" }) } function l(e) { let n = t.scripts[e]; if (n) { let e = 0; for (let t = 0; t < n.length; t++) { e += l(n[t]) } return e } return 1 } for (let e = 0; e < n.scripts.length; e++) { let i = n.scripts[e], r = t.scripts[i]; if (r && r.length) { let e = 0; for (let t = 0; t < r.length; t++)e += l(r[t]); s(i, e) } else s(i, 0) } return e }, loadModules: async function (t) { if ("scripts" === t) { let s = this.orderScript(); s.sort((e, t) => e.weight - t.weight), n.scripts = s.map(e => e.scriptName); let i = []; for (let e = 0; e < n.scripts.length; e++) { let s = await this.loadScriptModule(n[t][e]); i.push(s) } let l = await Promise.all(i); n.scripts.map(t => { let n = l.find(e => e.scriptName === t); if (n) if ("link" === n.type) { let t = document.createElement("script"); t.src = e.scripts[n.scriptName], t.crossorigin = "anonymous", t.defer = !0, t.async = !0, document.head.insertBefore(t, document.head.childNodes[document.head.childNodes.length - 1].nextSibling) } else "no-preload-link" !== n.type && setTimeout(() => { let e = document.getElementById(n.scriptName); e.parentNode.insertBefore(n.tag, e), e.remove() }, 50) }), n.scripts = [] } else if ("styles" === t) { if (0 === n.styles.length) return; let s = []; for (let e = 0; e < n.styles.length; e++) { let i = this.loadStyleModule(n[t][e]); s.push(i) } let i = await Promise.all(s); n.styles.map(t => { let n = i.find(e => e.styleName === t); if (n) if ("link" === n.type) { let t = document.createElement("link"); t.href = e.styles[n.styleName], t.rel = "stylesheet", document.head.insertBefore(t, document.head.childNodes[document.head.childNodes.length - 1].nextSibling) } else { let e = document.getElementById(n.styleName); e.parentNode.insertBefore(n.tag, e), e.remove() } }), n.styles = [] } }, load: function () { this.loadModules("scripts") }, require: function (e, t) { n[t].push(e) } } }, Loader = ArenaRequireJS(); Loader.init();
</script>

{%- endif -%}